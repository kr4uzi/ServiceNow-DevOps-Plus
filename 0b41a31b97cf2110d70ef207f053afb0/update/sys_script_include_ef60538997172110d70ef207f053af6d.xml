<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_424426_devops.ConfigUtilClient</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>ConfigUtilClient</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[/* global global, gs, x_424426_devops */
/* global Class, GlideRecordSecure, GlideScriptedExtensionPoint */
/* eslint no-undef: "error" */
var ConfigUtilClient = Class.create();
ConfigUtilClient.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	initialize: function(request, responseXML, gc) {
		global.AbstractAjaxProcessor.prototype.initialize.apply(this, arguments);
		this.configUtil = new x_424426_devops.ConfigUtil();
	},

	getConfig: function() {
		const result = {
			status: 'error',
			message: ''
		};
		
		if (!gs.hasRole('x_424426_devops.devops_user')) {
			result.message = gs.getMessage('devops_unauthorized');
			return JSON.stringify(result);
		}

		const tableName = this.getParameter('record_table');
		const sysId = this.getParameter('record_sys_id');
		if (tableName && !sysId) {
			result.message = gs.getMessage('devops_invalid_parameters');
			return JSON.stringify(result);
		} else if (sysId && !tableName) {
			result.message = gs.getMessage('devops_invalid_parameters');
			return JSON.stringify(result);
		}

		try {
			let record = null;
			if (tableName && sysId) {
				try {
					const exts = new GlideScriptedExtensionPoint().getExtensions('DevOpsExt');
					if (exts.length) {
						const ext = exts[0];
						ext.initialize();
						const recordGr = ext.getRecord(tableName, sysId);
						if (recordGr && recordGr.isValidRecord()) {
							record = recordGr;
						}
					}
				} catch (e) {
					// we can still generate the config without an error
					result.message = 'Failed to handle record: ' + e + '\n' + e.stack;
					gs.error('getConfig (client) failed: ' + e + '\n' + e.stack);
				}
			}

			result.config = this.configUtil.getConfig({
				record: record
			});
			result.status = 'success';
		} catch (e) {
			result.message = e + '\n' + e.stack;
			result.status = 'error';
		}
			
		return JSON.stringify(result);
	},

	type: 'ConfigUtilClient'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-06 19:23:15</sys_created_on>
        <sys_id>ef60538997172110d70ef207f053af6d</sys_id>
        <sys_mod_count>38</sys_mod_count>
        <sys_name>ConfigUtilClient</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_ef60538997172110d70ef207f053af6d</sys_update_name>
        <sys_updated_by>markus.kraus@intrux.ch</sys_updated_by>
        <sys_updated_on>2025-09-20 16:50:03</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>ef60538997172110d70ef207f053af6d</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-11-29 19:11:01</sys_created_on>
        <sys_id>1c7dd22b830292100971c810feaad3f4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-29 19:11:01</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
