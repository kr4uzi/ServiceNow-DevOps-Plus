<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.CodeSearchHandlerForm</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Implements extension point x_424426_devops.CodeSearchHandler</description>
        <mobile_callable>false</mobile_callable>
        <name>CodeSearchHandlerForm</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/* global global, gs, x_424426_devops */
/* global Class, GlideRecordSecure, GlideStringUtil */
/* eslint no-undef: "error" */
var CodeSearchHandlerForm = Class.create();
CodeSearchHandlerForm.prototype = Object.extendsObject(x_424426_devops.CodeSearchHandlerBase, {
    initialize: function() {
		x_424426_devops.CodeSearchHandlerBase.prototype.initialize.apply(this, arguments);
    },

    handlesScope: function (scopeName) {
		return scopeName == 'global';
	},

	handlesTable: function (tableName) {
		return tableName == 'sys_ui_section';
	},

	/**
	 * search in the supplied table using the (fixed) context
	 * @param {string} table
	 * @param {string} term
	 * @param {{fields: Object<string, {type: string}>?, exact: boolean?, search_related: boolean?, additional_filter: string?, scope: string?, limit: number?, match_table: boolean?, }} [options]
	 * @return {{tableLabel: string, hits: {name: string, className: string, matches: {fieldLabel: string, lineMatches: {line: number, context: string}[]}[], sysId: string}}}
	 */
	search: function (table, term, options) {
		const escapedTerm = GlideStringUtil.escapeQueryTermSeparator(term);
		const fields = options?.field || this.getFields(table);
		let query = [];
		if (options?.additional_filter)
			query.push(options.additional_filter);

		if (options?.scope)
			query.push('sys_scope=' + options.scope);

		if (options?.match_table)
			query.push('sys_class_name=' + table);

		const uiSectionGr = new GlideRecordSecure('sys_ui_section');
		if (query.length)
			uiSectionGr.addEncodedQuery(query.join('^'));

		const fieldQuery = [];
		for (const field in fields) {
			fieldQuery.push(field + (options?.exact ? '=' : 'LIKE') + escapedTerm);
		}

		if (fieldQuery.length) {
			uiSectionGr.addEncodedQuery(fieldQuery.join('^OR'));
		}
		
		if (options?.search_related && query.length)
			uiSectionGr.addEncodedQuery('^NQ' + query.join('^'));

		uiSectionGr.orderBy('sys_class_name');
		uiSectionGr.orderBy('sys_name');

		if (options?.limit) {
			uiSectionGr.setLimit(options.limit);
		}

		uiSectionGr.query();

		const result = {
			tableLabel: uiSectionGr.getLabel(),
			hits: []
		};

		while (uiSectionGr.next()) {
			const hit = {
				name: uiSectionGr.getDisplayValue() || uiSectionGr.getUniqueValue(),
				className: uiSectionGr.getRecordClassName(),
				matches: this.getMatches(uiSectionGr, fields, term),
				sysId: uiSectionGr.getUniqueValue()
			};

			if (options?.search_related) {
				const uiElementGr = new GlideRecordSecure('sys_ui_element');
				uiElementGr.addQuery('sys_ui_section', uiSectionGr.sys_id);
				uiElementGr.orderBy('position');
				uiElementGr.query();
				while (uiElementGr.next()) {
					if (uiElementGr.type == 'annotation') {
						const annotationGr = new GlideRecordSecure('sys_ui_annotation');
						annotationGr.addQuery('sys_id', uiElementGr.element);
						annotationGr.addQuery('text', 'CONTAINS', term);
						annotationGr.setLimit(1);
						annotationGr.query();
						if (annotationGr.next()) {
							hit.matches = hit.matches.concat(
								this.getMatches(annotationGr, ['text'], term).map(m => {
									m.fieldLabel = 'Annotation: ' + m.fieldLabel;
									return m;
								})
							);
						}
					}

					hit.matches = hit.matches.concat(
						this.getMatches(uiElementGr, ['element'], term)
					);
				}
			}

			if (hit.matches.length) {
				result.hits.push(hit);
			}
		}

		return result;
    },

    type: 'CodeSearchHandlerForm'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-12 21:53:28</sys_created_on>
        <sys_id>a654ab3493b282101f07f5f08bba1094</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>CodeSearchHandlerForm</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_a654ab3493b282101f07f5f08bba1094</sys_update_name>
        <sys_updated_by>markus.kraus@intrux.ch</sys_updated_by>
        <sys_updated_on>2025-08-31 19:48:04</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>a654ab3493b282101f07f5f08bba1094</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-11-07 11:59:41</sys_created_on>
        <sys_id>abb7ef1c83b116900971c810feaad311</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-11-07 11:59:41</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
