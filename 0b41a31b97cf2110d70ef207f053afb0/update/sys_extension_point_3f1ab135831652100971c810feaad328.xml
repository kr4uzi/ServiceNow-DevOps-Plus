<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_extension_point">
    <sys_extension_point action="INSERT_OR_UPDATE">
        <api_name>x_424426_devops.DevOpsExt</api_name>
        <description/>
        <example><![CDATA[/* global Class, GlideStringUtil, gs, GlideRecordSecure, Packages, GlideSysAttachmentInputStream */
/* eslint no-undef: "error" */
var DevOpsExt = Class.create();
DevOpsExt.prototype = {
	initialize: function () {

	},

	unzip: function (base64Data) {
		var inf = null, bos = null, ios = null;
		try {
			// gzip header has a fixed length of 10
			var bytes = GlideStringUtil.base64DecodeAsBytes(base64Data);
			var gzipped = bytes.length >= 2
				&& (bytes[0] & 0xFF) == 0x1F
				&& (bytes[1] & 0xFF) == 0x8B;
			var offset = gzipped ? 10 : 0;
			inf = new Packages.java.util.zip.Inflater(gzipped);
			bos = new Packages.java.io.ByteArrayOutputStream();
			ios = new Packages.java.util.zip.InflaterOutputStream(bos, inf);
			ios.write(bytes, offset, bytes.length - offset);
			return bos.toString();
		} catch (e) {
			gs.error('failed to decompress: ' + e + '\n' + e.stack);
		} finally {
			if (ios) ios.close();
			if (bos) bos.close();
			if (inf) inf.end();
		}
		
		return '';
	},

	getRecord: function (tableName, sysId) {
		var recordGr = new GlideRecordSecure(tableName);
		recordGr.addQuery('sys_id', sysId);
		recordGr.query();
		if (recordGr.next()) {
			// wrapped in an if because of healthscan
		}

		return recordGr;
	},

	getZIPEntries: function (attSysID, options) {
		var zis = new Packages.java.util.zip.ZipInputStream(new GlideSysAttachmentInputStream(attSysID));
		var entry;

		var results = [];
		while ((entry = zis.getNextEntry()) !== null) {
			var fileEntry = {
				name: entry.getName(),
				directory: entry.isDirectory()
			};

			if (!fileEntry.directory && options && options.withContent) {
				var bis = new Packages.java.io.BufferedInputStream(zis, 1024);
				var b = -1;
				fileEntry.bytes = [];
				while ((b = bis.read()) != -1) {
					fileEntry.bytes.push(b);
				}
			}

			zis.closeEntry();
			results.push(fileEntry);
		}

		return results;
	},

	type: 'DevOpsExt'
};]]></example>
        <name>DevOpsExt</name>
        <restrict_scope>false</restrict_scope>
        <sys_class_name>sys_extension_point</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-12-06 16:24:48</sys_created_on>
        <sys_id>3f1ab135831652100971c810feaad328</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>DevOpsExt</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_extension_point_3f1ab135831652100971c810feaad328</sys_update_name>
        <sys_updated_by>markus.kraus@intrux.ch</sys_updated_by>
        <sys_updated_on>2025-09-13 18:06:40</sys_updated_on>
    </sys_extension_point>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>3f1ab135831652100971c810feaad328</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-12-06 16:24:48</sys_created_on>
        <sys_id>258ab135831652100971c810feaad330</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-12-06 16:24:48</sys_updated_on>
        <table>sys_extension_point</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
