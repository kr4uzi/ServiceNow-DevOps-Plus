<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_extension_point">
    <sys_extension_point action="INSERT_OR_UPDATE">
        <api_name>x_424426_devops.CodeSearchHandler</api_name>
        <description/>
        <example><![CDATA[/* global global, gs, x_424426_devops */
/* global Class, GlideRecord, GlideRecordSecure, GlideStringUtil */
/* eslint no-undef: "error" */
var CodeSearchHandler = Class.create();
CodeSearchHandler.prototype = Object.extendsObject(x_424426_devops.CodeSearchHandlerBase, {
	initialize: function() {
		x_424426_devops.CodeSearchHandlerBase.prototype.initialize.apply(this, arguments);
	},

	/**
	 * test if this extension point can handle the given scope
	 * @param {string} scopeSysID
	 * @return {boolean}
	 */
    handlesScope: function (scopeSysID) {
		var extScopeName = gs.getCurrentScopeName();
		if (['rhino.global', 'global'].includes(extScopeName)) {
			return scopeSysID == 'global';
		}

		var scopeGr = new GlideRecord('sys_scope');
		scopeGr.addQuery('scope', extScopeName);
		scopeGr.addQuery('sys_id', scopeSysID);
		scopeGr.setLimit(1);
		scopeGr.query();
		return scopeGr.hasNext();
	},

	/**
	 * test if this extensionpoint can handle the given table
	 * @param {string} tableName
	 * @return {boolean}
	 */
	handlesTable: function (tableName) {
		var extScopeName = gs.getCurrentScopeName();
		if (['rhino.global', 'global'].includes(extScopeName)) {
			extScopeName = 'global';
		}

		var dbObjectGr = new GlideRecordSecure('sys_db_object');
		dbObjectGr.addQuery('name', tableName);
		dbObjectGr.addQuery('sys_scope.scope', extScopeName);
		dbObjectGr.setLimit(1);
		dbObjectGr.query();
		return dbObjectGr.hasNext();
	},

	/**
	 * search in the supplied table using the (fixed) context
	 * @param {string} table
	 * @param {string} term
	 * @param {{fields: Object<string, {type: string}>?, exact: boolean?, search_related: boolean?, additional_filter: string?, scope: string?, limit: number?, match_table: boolean?, }} [options]
	 * @return {{tableLabel: string, hits: {name: string, className: string, matches: {fieldLabel: string, lineMatches: {line: number, context: string}[]}[], sysId: string}}}
	 */
	search: function (table, term, options) {
		// an exact sys_id query can increase performance for sys_id queries
		var escapedTerm = GlideStringUtil.escapeQueryTermSeparator(term);
		var query = 'sys_id=' + escapedTerm;
		var fields = (options && options.fields) ? options.fields : this.getFields(table);
		for (var field in fields) {
			var operator = 'LIKE';
			if (options && options.exact) {
				operator = '=';
			}

			query += '^OR' + field + (fields[field].operator || operator) + escapedTerm;
		}

		var anyGr = new GlideRecordSecure(table);
		if (options && options.additional_filter) {
			anyGr.addEncodedQuery(options.additional_filter);
		}
		
		anyGr.addEncodedQuery(query);

		if (options && options.scope && anyGr.isValidField('sys_scope')) {
			anyGr.addQuery('sys_scope', options.scope);
		}

		if (anyGr.isValidField('sys_class_name')) {
			if (options && options.match_table) {
				anyGr.addQuery('sys_class_name', table);
			}

			anyGr.orderBy('sys_class_name');
		}

		if (anyGr.isValidField('sys_name')) {
			anyGr.orderBy('sys_name');
		}

		if (options && options.limit) {
			anyGr.setLimit(options.limit);
		}

		anyGr.query();

		var result = {
			tableLabel: anyGr.getLabel(),
			hits: []
		};

		while (anyGr.next()) {
			var matches = this.getMatches(anyGr, fields, term);
			if (matches.length) {
				result.hits.push({
					name: anyGr.getDisplayValue() || anyGr.getUniqueValue(),
					className: anyGr.getRecordClassName(),
					matches: matches,
					sysId: anyGr.getUniqueValue()
				});
			}
		}

		return result;
    },

    type: 'CodeSearchHandler'
});]]></example>
        <name>CodeSearchHandler</name>
        <restrict_scope>false</restrict_scope>
        <sys_class_name>sys_extension_point</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-12 05:14:50</sys_created_on>
        <sys_id>c27f336893b242101f07f5f08bba10d5</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>CodeSearchHandler</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_extension_point_c27f336893b242101f07f5f08bba10d5</sys_update_name>
        <sys_updated_by>markus.kraus@intrux.ch</sys_updated_by>
        <sys_updated_on>2025-08-31 19:47:11</sys_updated_on>
    </sys_extension_point>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>c27f336893b242101f07f5f08bba10d5</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-10-27 19:33:41</sys_created_on>
        <sys_id>ae2620c583ed92100971c810feaad386</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-10-27 19:33:41</sys_updated_on>
        <table>sys_extension_point</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
