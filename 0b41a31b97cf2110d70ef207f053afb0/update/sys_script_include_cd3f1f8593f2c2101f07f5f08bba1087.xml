<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_424426_devops.CodeSearchHandlerWF</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Implements extension point x_424426_devops.CodeSearchHandler</description>
        <mobile_callable>false</mobile_callable>
        <name>CodeSearchHandlerWF</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/* global global, gs, x_424426_devops */
/* global Class, GlideRecordSecure, GlideStringUtil */
/* eslint no-undef: "error" */
var CodeSearchHandlerWF = Class.create();
CodeSearchHandlerWF.prototype = Object.extendsObject(x_424426_devops.CodeSearchHandlerBase, {
    initialize: function() {
		x_424426_devops.CodeSearchHandlerBase.prototype.initialize.apply(this, arguments);
    },

     handlesScope: function (scopeName) {
		return scopeName == 'global';
	},

	handlesTable: function (tableName) {
		return tableName == 'wf_workflow';
	},

	/**
	 * search in the supplied table using the (fixed) context
	 * @param {string} table
	 * @param {string} term
	 * @param {{fields: Object<string, {type: string}>?, exact: boolean?, search_related: boolean?, additional_filter: string?, scope: string?, limit: number?, match_table: boolean?, }} [options]
	 * @return {{tableLabel: string, hits: {name: string, className: string, matches: {fieldLabel: string, lineMatches: {line: number, context: string}[]}[], sysId: string}}}
	 */
	search: function (table, term, options) {
		const escapedTerm = GlideStringUtil.escapeQueryTermSeparator(term);
        const fields = options?.field || this.getFields(table);
		let query = [];
		if (options?.additional_filter)
			query.push(options.additional_filter);

		if (options?.scope)
			query.push('sys_scope=' + options.scope);

		if (options?.match_table)
			query.push('sys_class_name=' + table);

		const workflowGr = new GlideRecordSecure('wf_workflow');
		if (query.length)
			workflowGr.addEncodedQuery(query.join('^'));

		const fieldQuery = [];
		for (const field in fields) {
			fieldQuery.push(field + (options?.exact ? '=' : 'LIKE') + escapedTerm);
		}

		if (fieldQuery.length) {
			workflowGr.addEncodedQuery(fieldQuery.join('^OR'));
		}
		
		// related search must not contain the field conditions the term might be present in the fields but in the related records
		if (options?.search_related && query.length)
			workflowGr.addEncodedQuery('^NQ' + query.join('^'));

		workflowGr.orderBy('sys_class_name');
		workflowGr.orderBy('sys_name');

		if (options?.limit) {
			workflowGr.setLimit(options?.limit);
		}

		workflowGr.query();

		const result = {
			tableLabel: workflowGr.getLabel(),
			hits: []
		};

		while (workflowGr.next()) {
			const hit = {
				name: workflowGr.getDisplayValue() || workflowGr.getUniqueValue(),
				className: workflowGr.getRecordClassName(),
				matches: this.getMatches(workflowGr, fields, term),
				sysId: workflowGr.getUniqueValue()
			};

			if (hit.matches.length) {
				result.hits.push(hit);
			}

			if (options?.search_related) {
				const wfVersionGr = new GlideRecordSecure('wf_workflow_version');
				wfVersionGr.addQuery('workflow', workflowGr.sys_id);
				wfVersionGr.orderBy('order');
				wfVersionGr.query();
				while (wfVersionGr.next()) {
					const wfName = wfVersionGr.getDisplayValue() || wfVersionGr.getUniqueValue();
					const hit = {
						name: wfName + (wfVersionGr.published ? ' (current version)' : ' (previous version)'),
						className: wfVersionGr.getRecordClassName(),
						matches: [] ,
						sysId: wfVersionGr.getUniqueValue()
					};

					const wfActivityGr = new GlideRecordSecure('wf_activity');
					wfActivityGr.addQuery('workflow_version', wfVersionGr.sys_id);
					wfActivityGr.query();
					while (wfActivityGr.next()) {
						const activityName = 'Activity: ' + wfActivityGr.getDisplayValue() || wfActivityGr.getDisplayValue('activity_definition');
						const variableGr = new GlideRecordSecure('sys_variable_value');
						variableGr.addQuery('document', 'wf_activity');
						variableGr.addQuery('document_key', wfActivityGr.sys_id);
						variableGr.addQuery('value', 'CONTAINS', term);
						variableGr.query();
						while (variableGr.next()) {
							this.getMatches(variableGr, ['value'], term).forEach(m => {
								m.fieldLabel = activityName + ' > ' + variableGr.getDisplayValue('variable');
								hit.matches.push(m);
							});
						}
					}

					if (hit.matches.length) {
						result.hits.push(hit);
					}
				}
			}
		}

		return result;
    },

    type: 'CodeSearchHandlerWF'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-13 16:09:28</sys_created_on>
        <sys_id>cd3f1f8593f2c2101f07f5f08bba1087</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>CodeSearchHandlerWF</sys_name>
        <sys_package display_value="DevOps+" source="x_424426_devops">0b41a31b97cf2110d70ef207f053afb0</sys_package>
        <sys_policy/>
        <sys_scope display_value="DevOps+">0b41a31b97cf2110d70ef207f053afb0</sys_scope>
        <sys_update_name>sys_script_include_cd3f1f8593f2c2101f07f5f08bba1087</sys_update_name>
        <sys_updated_by>markus.kraus@intrux.ch</sys_updated_by>
        <sys_updated_on>2025-08-31 19:45:37</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>cd3f1f8593f2c2101f07f5f08bba1087</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-10-31 10:41:37</sys_created_on>
        <sys_id>3fb2174a83a1de500971c810feaad36a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-10-31 10:41:37</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
